datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ARTIST
  ADMIN
}

model User {
  id         String      @id @default(dbgenerated("gen_random_uuid()"))
  username   String      @unique
  email      String      @unique
  password   String
  role       UserRole?   @default(USER)
  isVerified Boolean     @default(false)
  genres     Genre[]
  profile    Profile?
  following  Following[] @relation("Follower")
  followers  Followers[] @relation("Following")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  tracks     Track[]
  playlists  Playlist[]

}

model Profile {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  name      String
  bio       String?
  avatar    String?
  cover     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
}

model Genre {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  popularity  Int      @default(0)
  updatedAt   DateTime @updatedAt
  users       User[]
  tracks      Track[]
}

model Following {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  follower   User     @relation("Follower", fields: [followerId], references: [id])
  followerId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Followers {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  following   User     @relation("Following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Track {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  title       String
  description String?
  src         String
  cover       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creator        User     @relation(fields: [creatorId], references: [id])
  creatorId      String
  genre       Genre    @relation(fields: [genreId], references: [id])
  genreId     String
  playlists   Playlist[]
}


model Playlist {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  title       String
  description String?
  cover       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creator        User     @relation(fields: [creatorId], references: [id])
  creatorId      String
  tracks      Track[]

}
