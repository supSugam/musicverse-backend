datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  MEMBER
  ARTIST
  ADMIN
}

enum ReviewStatus {
  REQUESTED
  APPROVED
  REJECTED
  NOT_REQUESTED
}


enum NotificationType {
  FOLLOW
  DOWNLOAD_TRACK
  LIKE_TRACK
  SAVE_PLAYLIST
  SAVE_ALBUM
  COLLABORATE_PLAYLIST
  NEW_TRACK
  NEW_ALBUM
  NEW_PLAYLIST
  TRACK_PUBLIC_APPROVED
}

model User {
  id                    String          @id @default(dbgenerated("gen_random_uuid()"))
  username              String          @unique
  email                 String          @unique
  password              String
  role                  UserRole?       @default(USER)
  isVerified            Boolean         @default(false)
  artistStatus          ReviewStatus?   @default(NOT_REQUESTED)
  genres                Genre[]
  profile               Profile?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  tracks                Track[]
  playlists             Playlist[]
  albums                Album[]
  memberships           Membership[]
  collaboratedPlaylists Playlist[]      @relation("Collaborators")
  likedTracks           LikedTrack[]
  savedPlaylists        SavedPlaylist[]
  savedAlbums           SavedAlbum[]
  downloads             Download[]
  plays                 Play[]
  devices               UserDevice[]
  notifications       Notification[] @relation("RecipientNotifications")
  triggerNotifications Notification[] @relation("TriggerUserNotifications")
  bannedUsers           BannedUser[]
  following     Follower[]     @relation("Following")
  followers     Follower[]     @relation("Follower")
}

model Follower {
  id           String     @id @default(dbgenerated("gen_random_uuid()"))
  follower     User       @relation("Following", fields: [followerId], references: [id])
  followerId   String
  following    User       @relation("Follower", fields: [followingId], references: [id])
  followingId  String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([followerId, followingId])
}

model BannedUser {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  reason    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId])
}

model PlaylistInvitation {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  playlistId String
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  token     String   @unique
  expiresAt DateTime @default(dbgenerated("now() + interval '7 days'"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([playlistId])
}

model UserDevice {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  deviceToken String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  @@unique([userId, deviceToken])
}

model Notification {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  type         NotificationType
  title        String
  body         String
  imageUrl    String?
  read         Boolean  @default(false)
  time    DateTime @default(now())
  recipient    User     @relation("RecipientNotifications", fields: [recipientId], references: [id])
  recipientId  String
  triggerUser  User?     @relation("TriggerUserNotifications", fields: [triggerUserId], references: [id])
  triggerUserId String?
  destinationId String? // ID of the track, album, playlist, user etc
}
model Track {
  id              String        @id @default(dbgenerated("gen_random_uuid()"))
  title           String
  description     String?
  src             String
  preview         String?
  cover           String?
  lyrics          String?
  publicStatus    ReviewStatus? @default(NOT_REQUESTED)
  trackDuration   Int
  previewDuration Int
  plays           Play[]
  trackSize       Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  creator         User          @relation(fields: [creatorId], references: [id])
  creatorId       String
  genre           Genre         @relation(fields: [genreId], references: [id])
  genreId         String
  playlists       Playlist[] // Playlists containing this track
  albums          Album[] // Albums containing this track
  tags            Tag[]
  likedBy         LikedTrack[]  // Tracks liked by users
  downloads       Download[]
}

model LikedTrack {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  track     Track    @relation(fields: [trackId], references: [id])
  trackId   String
  likedAt   DateTime @default(now())
  @@unique([userId, trackId])
}

model SavedPlaylist {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId String
  savedAt    DateTime @default(now())
  @@unique([userId, playlistId])
}

model SavedAlbum {
  id      String   @id @default(dbgenerated("gen_random_uuid()"))
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  album   Album    @relation(fields: [albumId], references: [id])
  albumId String
  savedAt DateTime @default(now())
  @@unique([userId, albumId])
}

model Profile {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  name      String
  bio       String?
  avatar    String?
  cover     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
}

model Genre {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
  tracks      Track[]
  albums      Album[]
}


model Play {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  track     Track    @relation(fields: [trackId], references: [id])
  trackId   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Download {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  track     Track    @relation(fields: [trackId], references: [id])
  trackId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Playlist {
  id            String          @id @default(dbgenerated("gen_random_uuid()"))
  title         String
  description   String?
  cover         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  creator       User            @relation(fields: [creatorId], references: [id])
  creatorId     String
  tracks        Track[] // Tracks in this playlist
  publicStatus  ReviewStatus?   @default(NOT_REQUESTED)
  tags          Tag[]
  collaborators User[]          @relation("Collaborators")
  savedBy       SavedPlaylist[]
  invitations   PlaylistInvitation[]
}

model Album {
  id           String        @id @default(dbgenerated("gen_random_uuid()"))
  title        String
  description  String?
  cover        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  genreId      String
  genre        Genre         @relation(fields: [genreId], references: [id])
  publicStatus ReviewStatus? @default(APPROVED)
  creator      User          @relation(fields: [creatorId], references: [id])
  creatorId    String
  tracks       Track[] // Tracks in this album
  tags         Tag[]
  savedBy      SavedAlbum[]
}

model Tag {
  id        String     @id @default(dbgenerated("gen_random_uuid()"))
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  tracks    Track[]
  playlists Playlist[]
  albums    Album[]
}

model Membership {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      UserRole
  expiresAt DateTime @default(dbgenerated("now() + interval '1 month'"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
